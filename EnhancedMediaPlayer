package EnhancedMediaPlayer;

import java.io.File;
import javafx.util.Duration;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.collections.FXCollections;
import javafx.collections.MapChangeListener;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Slider;
import javafx.scene.effect.Reflection;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;


/**
 *
 * @author Paul Zajac, Christian Racho, Joe Martinez, Sweta Navadia, Jacob Espana <joespana@neiu.edu>
 */
public class EnhancedMediaPlayer extends Application
{
    private Scene scene; 
    private final BorderPane bPane = new BorderPane();
    private HBox hb_btnHolder, hb_sldHolder, hb_bottomParent, hb_imgHolder, hb_songBox, hb_artistBox, hb_titleBox; //container for buttons, images, and labels
    private VBox vb_playlistContain, vbCenter; //containers for playlist and album art
    private ObservableList<File> files; //list of files added to playlist
    private ListView<String> lv_playlist; //listview of files
    private File src; //file to manipulate in chooseFile() method
    private Button btn_prevSong, btn_play_pause, btn_nextSong, btn_scrubBack, btn_scrubForward, btn_addSong; //buttons for functionality
    private Slider sld_volume, sld_scrubber; //sliders for functionality
    private MediaPlayer mp; //mediaPlayer object to take in media objects for playability
    private Media m; //media object to take in mp3 files
    private final Image img_default = new Image("EnhancedMediaPlayer\\default-cover-art.png"); //default album art
    private Image img_AlbumArt; //image object for current selected media
    private ImageView iv_AlbumArt; //container for image
    private final Reflection reflection = new Reflection(); //reflection for some pizzazz lol
    private int startIndex = 0, songCount = 0, nextIndex = startIndex, prevIndex = nextIndex; //indices of current track
    private final Label lbl_artist = new Label(""), lbl_title = new Label(""); //Labels for title 
    
    private Duration duration;
    int selectedSong;
    int firstSongIndex = -1;
    
    public static void main(String[] args)
    {
        Application.launch(args);
    }
    
    @Override
    public void start(Stage primaryStage)
    {
        scene = new Scene(bPane, 800,600);
        setUpMediaPane();
        allActions();
        primaryStage.setTitle("Enhanced Media Player");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public void setUpMediaPane()
    {
        //bind bPane to scene
        bPane.prefWidthProperty().bind(scene.widthProperty());
        bPane.prefHeightProperty().bind(scene.heightProperty());
        
        //hb to contain bottom controls
        hb_bottomParent = new HBox(5);
        
        //hb to contain bottom bottons
        hb_btnHolder = new HBox(8);
        hb_btnHolder.prefWidthProperty().bind(hb_bottomParent.widthProperty().multiply(.4));
        hb_btnHolder.setPadding(new Insets(0, 0, 40, 60));
        
        //hb to contain bottom sliders
        hb_sldHolder = new HBox();
        hb_sldHolder.prefWidthProperty().bind(hb_bottomParent.widthProperty().multiply(.7));
        hb_sldHolder.setAlignment(Pos.CENTER);
        hb_sldHolder.setPadding(new Insets(0, 50, 40, 0));
        hb_bottomParent.getChildren().addAll(hb_btnHolder, hb_sldHolder);
        
        //adding hb container to bottom of bPane
        bPane.setBottom(hb_bottomParent);
        
        //creating buttons for functionality
        btn_prevSong = new Button("<<<");
        btn_scrubBack = new Button("<<");
        btn_play_pause = new Button(">");
        btn_scrubForward = new Button(">>");
        btn_nextSong = new Button(">>>");
        
        //adding buttons to hb
        hb_btnHolder.getChildren().addAll(btn_prevSong, btn_scrubBack, btn_play_pause, btn_scrubForward, btn_nextSong);
        
        //creating slider for current time of media playing
        sld_scrubber = new Slider();
        sld_scrubber.setValue(0);
        sld_scrubber.setShowTickMarks(true);
        sld_scrubber.setMin(0.00);
        sld_scrubber.prefWidthProperty().bind(hb_sldHolder.widthProperty().multiply(.7));
        
        //creating slider for volume
        sld_volume = new Slider();
        sld_volume.setValue(50);
        sld_volume.setShowTickMarks(true);
        
        //adding sliders to hb
        hb_sldHolder.getChildren().addAll(sld_scrubber, sld_volume);
        
        //vb container for listview playlist
        vb_playlistContain = new VBox(10);
        
        //observable list to manipulate media files
        files = FXCollections.observableArrayList();
        
        //listview to display contents of files observable list
        lv_playlist = new ListView<>();
        vb_playlistContain.setPadding(new Insets(40, 50, 0, 20));
        
        //button for adding song functionality
        btn_addSong = new Button("+");
        
        //adding lv and btn to vb, vb to right of bPane
        vb_playlistContain.getChildren().addAll(lv_playlist, btn_addSong);
        bPane.setRight(vb_playlistContain);
        
        //hb to hold albumArt
        hb_imgHolder = new HBox();
        hb_imgHolder.prefWidthProperty().bind(bPane.widthProperty().multiply(.45));
        hb_imgHolder.prefHeightProperty().bind(bPane.heightProperty().multiply(.45));
        hb_imgHolder.setAlignment(Pos.CENTER);
        
        //vb to hold hb, titles  
        vbCenter = new VBox();
        vbCenter.prefWidthProperty().bind(bPane.widthProperty().multiply(.45));
        vbCenter.prefHeightProperty().bind(bPane.heightProperty().multiply(.45));
        vbCenter.setAlignment(Pos.CENTER);
        
        //reflection for pizzazz lol
        reflection.setFraction(0.2);
        
        //setting albumArt to default if no song is playing or if song has no album art
        img_AlbumArt = img_default;
        iv_AlbumArt = new ImageView(img_AlbumArt);
        iv_AlbumArt.setPreserveRatio(true);
        iv_AlbumArt.setFitWidth(240);
        iv_AlbumArt.setPreserveRatio(true);
        iv_AlbumArt.setSmooth(true);
        iv_AlbumArt.setEffect(reflection);
        
        //hbs for song, artist and title
        hb_songBox = new HBox();
        hb_artistBox = new HBox();
        hb_titleBox = new HBox();
        hb_artistBox.getChildren().add(lbl_artist);
        hb_titleBox.getChildren().add(lbl_title);        
        hb_songBox.setAlignment(Pos.CENTER);
        hb_songBox.getChildren().addAll(hb_artistBox, hb_titleBox);
        
        //adding iv to hb
        hb_imgHolder.getChildren().add(iv_AlbumArt);
        
        //adding hb for album art and song info
        vbCenter.getChildren().addAll(hb_songBox, hb_imgHolder); //put everything in a VBox
        
        //adding vb to center of bPane
        bPane.setCenter(vbCenter);  
    }
    public void mediaHandler() 
    {   
    //THIS GETS METADATA FROM A FILE
        
        try 
        {      
            m.getMetadata().addListener((MapChangeListener.Change<? extends String, ? extends Object> ch) -> {
                if (ch.wasAdded())
                    metadataHandler(ch.getKey(), ch.getValueAdded());
                
            });

            //create media player
            mp = new MediaPlayer(m); 
            mp.volumeProperty().bind(sld_volume.valueProperty().divide(100)); //binds volume to slider
            
            mp.setOnError(() -> {
                final String errorMessage = m.getError().getMessage();
                // Handle errors during playback
                System.out.println("MediaPlayer Error: " + errorMessage);
            });
        } 
        catch(NullPointerException npe) 
        {
            //Handle null pointer exception
            System.out.println("Caught Exception: " + npe.getMessage());
            iv_AlbumArt.setImage(img_default);
        } 
        catch (RuntimeException re) 
        {
            //Handle construction errors
            System.out.println("Caught Exception: " + re.getMessage());
        }    
    }
    public void metadataHandler(String key, Object value)
    {
    //THIS SETS ARTWORK, ARTIST, TITLE LABELS etc.
        
        if (key.equals("image")) 
            iv_AlbumArt.setImage((Image)value);
        
        if (key.equals("artist")) 
          lbl_artist.setText(value.toString() + " - ");
        
        if (key.equals("title")) 
          lbl_title.setText(value.toString());   
    }
    public void resetMetadata(){
        
        lbl_artist.setText("N/A - ");
        lbl_title.setText("N/A");
        iv_AlbumArt.setImage(img_default);
    }
    public void chooseFile()
    {
        FileChooser f = new FileChooser();
        
        f.getExtensionFilters().add(new ExtensionFilter("Mp3 Files", "M4A Files", "*.mp3", "*.m4a")); //ADDED M4A files for testing purposes
        
        src = f.showOpenDialog(null);
        
        if (src != null)
        {
            lv_playlist.getItems().add(src.getName());
            
            if(files.isEmpty())
            {
                files.add(src);
                createMedia(startIndex); //<- starting index added instead of something else that was here, dont remember what
            }
            else
                files.add(src);

        songCount++;  
        System.out.println(songCount);
        }
        else
            System.out.println("No File Selected.");
    }
    
    public void createMedia(int index) // <- i added a parameter 'index'
    {
        m = new Media(files.get(index).toURI().toString());
        mp = new MediaPlayer(m);
        lv_playlist.getSelectionModel().select(index);
        mediaHandler();
    }
     public void updateValues() 
     {
        
        duration = mp.getMedia().getDuration();
        
        if (sld_scrubber != null ) 
        {
            Platform.runLater(() -> {
                Duration currentTime = mp.getCurrentTime();
               
                sld_scrubber.setDisable(duration.isUnknown());
                
                if (!sld_scrubber.isDisabled()
                && duration.greaterThan(Duration.ZERO)
                && !sld_scrubber.isValueChanging())
                    sld_scrubber.setValue(currentTime.divide(duration).toMillis()* 100.0);
           });
        }
    }
    public void startSlider()
    {
        mp.seek(mp.getStartTime());   
        mp.currentTimeProperty().addListener((Observable ov) -> {
            updateValues();
        });   
    }
  
    public void sliderTest()
    {    
        sld_scrubber.valueProperty().addListener(new InvalidationListener() {
                
            @Override
            public void invalidated(Observable ov) 
            {
                if (sld_scrubber.isValueChanging())
                   // multiply duration by percentage calculated by slider position
                      mp.seek(duration.multiply(sld_scrubber.getValue() / 100.0));
            }
        });
    }
    public void allActions()
    {
        //lambda to add mp3 to listview
        btn_addSong.setOnMouseClicked(e -> {
           chooseFile(); 
        });
        
        //adding clickable functionality to listview
        lv_playlist.setOnMouseClicked((MouseEvent e) -> {
            if(e.getClickCount()==2)
            {
                resetMetadata();
                mp.stop();
                createMedia(lv_playlist.getSelectionModel().getSelectedIndex());
                mp.play();
                startSlider();
                sliderTest();
                btn_play_pause.setText("||");
            }
        });
        
        /*lambda to control pause and play
        needs functionality once media player is created.
        */
        
        btn_play_pause.setOnAction(e->{
            if(songCount!=0)  
            {
                if (btn_play_pause.getText().equals(">"))
                {
                    sliderTest();
                    mp.play();
                    startSlider();
                    btn_play_pause.setText("||");
                }
                else 
                {
                    sliderTest();
                    mp.pause();                 
                    btn_play_pause.setText(">");
                }
            }       
        });
        
        //event filter to add functionality for space bar play/pause
        bPane.addEventFilter(KeyEvent.KEY_PRESSED, e -> {
            if(e.getCode() == KeyCode.SPACE)
            {
                if(songCount!=0)
                {
                    if (btn_play_pause.getText().equals(">"))
                    {
                        
                        sliderTest();
                        mp.play();
                        startSlider();
                        btn_play_pause.setText("||");
                    }
                    else 
                    {
                       mp.pause();                 
                       btn_play_pause.setText(">");
                    }
                }
            }    
        });
        
        //functionality for scrubbing back 5 seconds
        btn_scrubBack.setOnAction(e->{
            if(songCount!=0)  
            {
                if(mp.getCurrentTime().lessThanOrEqualTo(new Duration(5000))) 
                    mp.seek(Duration.ZERO);
                else
                    mp.seek(mp.getCurrentTime().subtract(new Duration(5000)));   
            }
        });
        
        //functionality for scrubbing forward 5 seconds
        btn_scrubForward.setOnAction(e -> {
            if(songCount!=0)  
            {    
                if(mp.getCurrentTime().greaterThanOrEqualTo(mp.getTotalDuration().subtract(new Duration(5000))))
                {
                    nextIndex = startIndex;
                    createMedia(nextIndex++);
                }
                else if(mp.getCurrentTime()!=mp.getTotalDuration())
                    mp.seek(mp.getCurrentTime().add(new Duration(5000)));
            }
        });
        
        //functionality for prev song button 
        btn_prevSong.setOnAction(e->{
            if(songCount!=0)  
            {
                prevIndex = prevIndex - 1;             
                nextIndex = prevIndex;
                mp.stop();
                
                if(prevIndex < 0)
                {
                    prevIndex = songCount-1;
                    createMedia(prevIndex);
                    sliderTest();
                    mp.play();
                    startSlider();
                    btn_play_pause.setText("||");
                }
                else
                {            
                    resetMetadata();
                    createMedia(prevIndex);
                    sliderTest();
                    mp.play();
                    startSlider();
                    btn_play_pause.setText("||");
                }
            }  
        });
        
        //functionality for next song button
        btn_nextSong.setOnAction(e->{
            if(songCount!=0)  
            {
                nextIndex = nextIndex + 1;
                prevIndex = nextIndex;
                resetMetadata();
                mp.stop();

                if(files.size() == nextIndex)
                {

                    mp.stop();
                    startIndex = 0;
                    nextIndex = startIndex;
                    createMedia(startIndex);

                }else{            
                    createMedia(nextIndex);
                }
                sliderTest();
                mediaHandler();
                mp.play();
                startSlider();
                btn_play_pause.setText("||");
            }
        });   
    }
}
